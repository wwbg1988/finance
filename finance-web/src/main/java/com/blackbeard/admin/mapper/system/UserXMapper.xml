<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserXMapper">
	
    <!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>   -->
	
	<!-- 换皮肤-->
	<update id="setSKIN" parameterType="pd" flushCache="false">
		update sys_user set 
		SKIN = #{SKIN} 
		where USERNAME = #{USERNAME}
	</update>
	
	<!-- 更新登录时间 -->
	<update id="updateLastLogin" parameterType="pd" flushCache="false">
		update sys_user set 
		LAST_LOGIN = #{LAST_LOGIN} 
		where USER_ID = #{USER_ID}
	</update>
	
	<!-- 更新用户状态-->
	<update id="updateUserState" parameterType="pd" flushCache="false">
	update sys_user set
	user_state = #{userState},	
	last_update_time = #{lastUpdateTime}
	where USER_ID = #{USER_ID}
    </update>
	
	<!-- 更新用户余额-->
	<update id="updateUserBlance" parameterType="pd" flushCache="false">
	update sys_user set
	blance = #{blance},
	last_update_time = #{lastUpdateTime}
	where USER_ID = #{USER_ID} 
	</update>
	
	<!-- 判断用户名和密码 -->
	<select id="getUserInfo" parameterType="pd" resultType="pd" useCache="false"><!-- insert update delete (flushCache="true/false") -->
		select * from sys_user 
		where 1=1
		<if test="USERNAME != null and PASSWORD != null">
	  	and	(
	  		(USERNAME = #{USERNAME} and PASSWORD = #{PASSWORD})
	  		or
	  		(EMAIL = #{USERNAME} and PASSWORD = #{PASSWORD})
	  		or
	  		(NUMBER = #{USERNAME} and PASSWORD = #{PASSWORD})
	  		)
		</if>
		<if test="USER_ID != null and USER_ID != ''">
		and USER_ID = #{USER_ID}
		</if>
	</select>
	


	<!-- 查询id最大值 -->
	<select id="selectMaxUserId" parameterType="pd" resultType="java.lang.Integer" flushCache="false">
	select  MAX(USER_ID + 0) from sys_user;
	</select>
	
		<!-- 通过用户id更新MT4ID -->
	<update id="updateMt4IdByUId" parameterType="pd"  flushCache="false">
		update sys_user 
			set 
				mt4_id           = #{mt4Id},
				user_state       = #{userState},
				last_update_time = #{lastUpdateTime}
			where 
				USER_ID = #{USER_ID}
	</update>
	
	
	<!-- 存入IP -->
	<update id="saveIP" parameterType="pd"  flushCache="false">
		update sys_user 
			set 
				IP = #{IP}
			where 
				USERNAME = #{USERNAME}
	</update>
	

	<!-- 修改 -->
	<update id="editU" parameterType="pd" flushCache="false">
		update  sys_user
			set USERNAME				= #{USERNAME},
				NAME 					= #{NAME},
				ROLE_ID 				= #{ROLE_ID},
				BZ						= #{BZ},
				EMAIL					= #{EMAIL},
				NUMBER					= #{NUMBER},
				PHONE					= #{PHONE},
				certificate_no          = #{certificateNo},
				last_update_time        = #{lastUpdateTime}
			<if test="PASSWORD != null and PASSWORD != ''">
				,PASSWORD				= #{PASSWORD}
			</if>
			where 
				USER_ID = #{USER_ID}
	</update>
	
	
	   <select id="findByRoleId" resultType="pd" parameterType="pd">
        select 
			u.USER_ID,
			u.USERNAME,
			u.PASSWORD,
			u.NAME,
			u.RIGHTS,
			u.ROLE_ID,
			u.LAST_LOGIN,
			u.IP,
			u.STATUS,
			u.BZ,
			u.SKIN,
			u.EMAIL,
			u.NUMBER,
			u.PHONE,
			u.mt4_id,
			u.mt4_user_group,
			u.user_state,
			u.blance,
			u.certificate_no,
			u.certificate_url,
			u.create_time,
			u.last_update_time,
		    r.ROLE_NAME
		  from sys_user u, sys_role r 
		 where u.ROLE_ID = r.ROLE_ID 
         and u.ROLE_ID =  #{ROLE_ID}
    </select>
	
	
	<!-- 通过user_id获取数据 -->
	<select id="findByUiId" parameterType="pd" resultType="pd" useCache="false">
		select 
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			mt4_id,
			mt4_user_group,
			user_state,
			blance,
			certificate_no,
			certificate_url,
			create_time,
			last_update_time
		from 
			sys_user
		where 
			USER_ID = #{USER_ID}
	</select>
		
				
	<!-- 通过用户名获取数据 -->
	<select id="findByUserName" parameterType="pd" resultType="pd" useCache="false">
		select 
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			mt4_id,
			mt4_user_group,
			user_state,
			blance,
			certificate_no,
			certificate_url,
			create_time,
			last_update_time
		from 
			sys_user
		where 
			USERNAME = #{USERNAME}
	
	</select>
		
	<!-- 通过邮箱获取数据 -->
	<select id="findByUE" parameterType="pd" resultType="pd" useCache="false">
		select 
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			mt4_id,
			mt4_user_group,
			user_state,
			blance,
			certificate_no,
			certificate_url,
			create_time,
			last_update_time
		from 
			sys_user
		where 
			EMAIL = #{EMAIL}
		<if test="USERNAME != null and USERNAME != ''">
			and USERNAME != #{USERNAME} 
		</if>
	</select>
	
	<!-- 通过编号获取数据 -->
	<select id="findByUN" parameterType="pd" resultType="pd" useCache="false">
		select 
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			mt4_id,
			mt4_user_group,
			user_state,
			blance,
			certificate_no,
			certificate_url,
			create_time,
			last_update_time
		from 
			sys_user
		where 
			NUMBER = #{NUMBER}
		<if test="USERNAME != null and USERNAME != ''">
			and USERNAME != #{USERNAME} 
		</if>
	</select>
	
	<!-- 通过USERNAME获取数据 -->
	<select id="findByUId" parameterType="pd" resultType="pd" useCache="false">
		select 
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			mt4_id,
			mt4_user_group,
			user_state,
			blance,
			certificate_no,
			certificate_url,
			create_time,
			last_update_time
		from 
			sys_user
		where 
			USERNAME = #{USERNAME}
	</select>
	
	<!-- 新增用户 -->
	<insert id="saveU" parameterType="pd" flushCache="false">
		insert into sys_user (
			USER_ID,
			USERNAME,
			PASSWORD,
			NAME,
			RIGHTS,
			ROLE_ID,
			LAST_LOGIN,
			IP,
			STATUS,
			BZ,
			SKIN,
			EMAIL,
			NUMBER,
			PHONE,
			user_state,
			mt4_user_group,
		    certificate_no,
			certificate_url,
			create_time,
			last_update_time
		) values (
			#{USER_ID},
			#{USERNAME},
			#{PASSWORD},
			#{NAME},
			#{RIGHTS},
			#{ROLE_ID},
			#{LAST_LOGIN},
			#{IP},
			#{STATUS},
			#{BZ},
			#{SKIN},
			#{EMAIL},
			#{NUMBER},
			#{PHONE},
			#{userState},
			#{mt4_user_group},
			#{certificateNo},
			#{certificateUrl},
			#{createTime},
			#{lastUpdateTime}
		)
	</insert>
	<!-- 用户列表(用户组) -->
	<select id="userlistPage" parameterType="page" resultType="pd" useCache="false">
		select  u.USER_ID,
				u.USERNAME,
				u.PASSWORD,
				u.LAST_LOGIN,
				u.NAME,
				u.IP,
				u.EMAIL,
				u.blance,
				u.NUMBER,
				u.PHONE,
				u.certificate_no,
			    u.certificate_url,
			    u.user_state,
				r.ROLE_ID,
				r.ROLE_NAME
		from sys_user u, sys_role r 
		where u.ROLE_ID = r.ROLE_ID 
		and u.USERNAME != 'admin'
		and (r.ROLE_ID != '7' and r.PARENT_ID != '7')
		<if test="pd.USERNAME != null and pd.USERNAME != ''"><!-- 关键词检索 -->
			and
				(
					 u.USERNAME LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%')
					 or 
					 u.EMAIL LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%') 
					 or
					 u.NUMBER LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%')
					 or
					 u.NAME LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%')
					 or
					 u.PHONE LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%')
					  or
					 u.certificate_no LIKE CONCAT(CONCAT('%', #{pd.USERNAME}),'%')
				)
		</if>
		<if test="pd.ROLE_ID != null and pd.ROLE_ID != ''"><!-- 角色检索 -->
			and u.ROLE_ID=#{pd.ROLE_ID} 
		</if>
		<if test="pd.lastLoginStart!=null and pd.lastLoginStart!=''"><!-- 登录时间检索 -->
			and u.LAST_LOGIN &gt;= #{pd.lastLoginStart} 
		</if>
		<if test="pd.lastLoginEnd!=null and pd.lastLoginEnd!=''"><!-- 登录时间检索 -->
			and u.LAST_LOGIN &lt;= #{pd.lastLoginEnd} 
		</if>
		<if test="pd.user_state != null and pd.user_state != '' and pd.user_state !=4">
			and u.user_state=#{pd.user_state} 
		</if>
		order by u.LAST_LOGIN desc
	</select>
	
	<!-- 用户列表(全部) -->
	<select id="listAllUser" parameterType="pd" resultType="pd" useCache="false">
		select  u.USER_ID,
				u.USERNAME,
				u.PASSWORD,
				u.LAST_LOGIN,
				u.NAME,
				u.IP,
				u.EMAIL,
			    u.blance,
				u.NUMBER,
				u.PHONE,
				u.certificate_no,
			    u.certificate_url,
			    u.user_state,
				r.ROLE_ID,
				r.ROLE_NAME,
				u.BZ
				
		from sys_user u, sys_role r 
		where u.ROLE_ID = r.ROLE_ID 
		and u.USERNAME != 'admin'
		and (r.ROLE_ID != '7' and r.PARENT_ID != '7')
		<if test="USERNAME != null and USERNAME != ''"><!-- 关键词检索 -->
			and
				(
					 u.USERNAME LIKE CONCAT(CONCAT('%', #{USERNAME}),'%')
					 or 
					 u.EMAIL LIKE CONCAT(CONCAT('%', #{USERNAME}),'%') 
					 or
					 u.NUMBER LIKE CONCAT(CONCAT('%', #{USERNAME}),'%')
					 or
					 u.NAME LIKE CONCAT(CONCAT('%', #{USERNAME}),'%')
					  or
					 u.PHONE LIKE CONCAT(CONCAT('%', #{USERNAME}),'%')
				)
		</if>
		<if test="ROLE_ID != null and ROLE_ID != ''"><!-- 角色检索 -->
			and u.ROLE_ID=#{ROLE_ID} 
		</if>
		<if test="lastLoginStart!=null and lastLoginStart!=''"><!-- 登录时间检索 -->
			and u.LAST_LOGIN &gt;= #{lastLoginStart} 
		</if>
		<if test="lastLoginEnd!=null and lastLoginEnd!=''"><!-- 登录时间检索 -->
			and u.LAST_LOGIN &lt;= #{lastLoginEnd} 
		</if>
		order by u.LAST_LOGIN desc
	</select>
	
	<!-- 删除用户 -->
	<delete id="deleteU" parameterType="pd" flushCache="false">
		delete from sys_user
		where 
			USER_ID = #{USER_ID}
	</delete>
	
	<!-- 批量删除用户 -->
	<delete id="deleteAllU" parameterType="String" flushCache="false">
		delete from sys_user
		where 
			USER_ID in
  			 <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                  #{item}
             </foreach>
	</delete>
	
</mapper>